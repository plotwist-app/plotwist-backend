{"version":3,"sources":["../../src/core/either.ts"],"sourcesContent":["export type Left<T> = {\n  left: T\n  right?: never\n}\n\nexport type Right<U> = {\n  left?: never\n  right: U\n}\n\nexport type Either<T, U> = NonNullable<Left<T> | Right<U>>\n\nexport const isLeft = <T, U>(e: Either<T, U>): e is Left<T> => {\n  return e.left !== undefined\n}\n\nexport const isRight = <T, U>(e: Either<T, U>): e is Right<U> => {\n  return e.right !== undefined\n}\n\nexport type UnwrapEither = <T, U>(e: Either<T, U>) => NonNullable<T | U>\n\nexport const unwrapEither: UnwrapEither = <T, U>({\n  left,\n  right,\n}: Either<T, U>) => {\n  if (right !== undefined && left !== undefined) {\n    throw new Error(\n      `Received both left and right values at runtime when opening an Either\\nLeft: ${JSON.stringify(\n        left\n      )}\\nRight: ${JSON.stringify(right)}`\n    )\n  }\n\n  if (left !== undefined) {\n    return left as NonNullable<T>\n  }\n\n  if (right !== undefined) {\n    return right as NonNullable<U>\n  }\n\n  throw new Error(\n    'Received no left or right values at runtime when opening Either'\n  )\n}\n\nexport const makeLeft = <T>(value: T): Left<T> => ({ left: value })\n\nexport const makeRight = <U>(value: U): Right<U> => ({ right: value })\n"],"mappings":";AAYO,IAAM,SAAS,CAAO,MAAkC;AAC7D,SAAO,EAAE,SAAS;AACpB;AAEO,IAAM,UAAU,CAAO,MAAmC;AAC/D,SAAO,EAAE,UAAU;AACrB;AAIO,IAAM,eAA6B,CAAO;AAAA,EAC/C;AAAA,EACA;AACF,MAAoB;AAClB,MAAI,UAAU,UAAa,SAAS,QAAW;AAC7C,UAAM,IAAI;AAAA,MACR;AAAA,QAAgF,KAAK;AAAA,QACnF;AAAA,MACF,CAAC;AAAA,SAAY,KAAK,UAAU,KAAK,CAAC;AAAA,IACpC;AAAA,EACF;AAEA,MAAI,SAAS,QAAW;AACtB,WAAO;AAAA,EACT;AAEA,MAAI,UAAU,QAAW;AACvB,WAAO;AAAA,EACT;AAEA,QAAM,IAAI;AAAA,IACR;AAAA,EACF;AACF;AAEO,IAAM,WAAW,CAAI,WAAuB,EAAE,MAAM,MAAM;AAE1D,IAAM,YAAY,CAAI,WAAwB,EAAE,OAAO,MAAM;","names":[]}